name: Deploy to GitHub Pages with Corporate Content

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout public repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clone Corporate Repository
        run: |
          echo "Cloning corporate repository using token..."
          git clone https://${{ secrets.CORPORATE_PAT }}@github.com/fwornle/agentic-ai-nano-corporate.git docs-content/extended-content
          
          # Verify clone worked
          echo "Corporate content structure:"
          ls -la docs-content/extended-content/
          echo "Checking for encrypted content:"
          ls -la docs-content/extended-content/content.encrypted.json

      - name: Verify corporate content
        run: |
          echo "Corporate content structure:"
          ls -la docs-content/extended-content/
          echo "Encrypted content exists:"
          ls -la docs-content/extended-content/content.encrypted.json || echo "content.encrypted.json not found"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install mkdocs-material
          pip install mkdocs-awesome-pages-plugin
          pip install mkdocs-mermaid2-plugin
          pip install mkdocs-minify-plugin
          pip install mkdocs-git-revision-date-localized-plugin

      - name: Prepare corporate content for MkDocs build
        run: |
          echo "Preparing corporate content for inclusion in MkDocs build..."
          # Remove git-related files from corporate content to avoid GitHub Pages exclusion
          rm -rf docs-content/extended-content/.git
          rm -f docs-content/extended-content/.gitmodules
          echo "Corporate content prepared:"
          ls -la docs-content/extended-content/
          echo "Checking for encrypted content:"
          ls -la docs-content/extended-content/content.encrypted.json

      - name: Build with MkDocs and inject corporate content
        run: |
          echo "Building site with MkDocs and injecting encrypted corporate content..."
          # Copy corporate content to expected location for build script
          mkdir -p docs-content/corporate-only
          cp docs-content/extended-content/content.encrypted.json docs-content/corporate-only/content.encrypted.json
          
          # Install Node.js for build script
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install node
          
          # Run enhanced build script that injects encrypted content into HTML comments
          chmod +x scripts/build-with-corporate-content.sh
          bash scripts/build-with-corporate-content.sh
          
          echo "Verifying encrypted content was injected:"
          grep -c "ENCRYPTED_CORPORATE_CONTENT_START" site/03_mcp-acp-a2a/Session10_Enterprise_Integration_Production_Deployment/index.html || echo "No encrypted content markers found"

      - name: Create .nojekyll file for GitHub Pages
        run: |
          echo "Creating .nojekyll file to bypass Jekyll processing..."
          touch site/.nojekyll
          echo "Verifying .nojekyll file was created:"
          ls -la site/.nojekyll

      - name: Final verification before upload
        run: |
          echo "Final site structure before upload:"
          ls -la site/
          echo "Checking encrypted content in assets:"
          ls -la site/assets/data/corporate-content.js || echo "WARNING: corporate-content.js not found"
          echo "Verifying .nojekyll exists:"
          ls -la site/.nojekyll || echo "WARNING: .nojekyll not found"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './site'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4