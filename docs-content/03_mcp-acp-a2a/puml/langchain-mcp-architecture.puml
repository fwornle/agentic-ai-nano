@startuml langchain-mcp-architecture
!include ../../../config/_standard-style.puml

title LangChain MCP Integration Architecture

package "LangChain Application" {
  [LLM (GPT-4/Claude)] <<agent>> as llm
  [ReAct Agent] <<core>> as agent
  [LangChain MCP Adapter] <<api>> as adapter
  [Tool Registry] <<util>> as registry
}

package "MCP Servers" {
  [Weather MCP Server] <<external>> as weather
  [File System MCP Server] <<external>> as filesystem  
  [Database MCP Server] <<storage>> as database
}

package "External Resources" {
  [Weather APIs] <<external>> as weather_api
  [Local File System] <<storage>> as files
  [SQLite Database] <<storage>> as sqlite
}

package "LangGraph Workflow" {
  [Planning Node] <<core>> as plan
  [Tool Execution Node] <<api>> as execute
  [Reflection Node] <<util>> as reflect
  [Decision Node] <<core>> as decide
}

llm --> agent : Natural Language
agent --> adapter : Tool Requests
adapter --> registry : Discover Tools

registry --> weather : JSON-RPC
registry --> filesystem : JSON-RPC
registry --> database : JSON-RPC

weather --> weather_api : API Calls
filesystem --> files : File Operations
database --> sqlite : SQL Queries

agent --> plan : Start Workflow
plan --> execute : Execute Tools
execute --> reflect : Evaluate Results
reflect --> decide : Continue/Stop
decide ..> plan : Iterate

note right of adapter
  LangChain MCP Adapter:
  - Automatic tool discovery
  - Type conversion
  - Error handling
  - Session management
end note

note bottom of registry
  Multi-Server Support:
  - Weather: get_weather, forecast
  - FileSystem: read_file, write_file
  - Database: query, insert, update
end note

@enduml