{
  "analysis_timestamp": "1756565301.7451673",
  "target": "/Users/q284340/Agentic/nano-degree/docs-content/03_mcp-acp-a2a/Session9_Production_Agent_Deployment.md",
  "overall_metrics": {
    "total_files": 1,
    "code_block_score": 100.0,
    "formatting_score": 100.0,
    "explanation_score": 96.29629629629629,
    "overall_score": 98.51851851851852,
    "critical_issues": 0,
    "total_issues": 2
  },
  "detailed_results": {
    "detect_large_code_blocks": {
      "success": true,
      "data": {
        "summary": {
          "total_files": 1,
          "files_needing_refactoring": 0,
          "total_large_blocks": 0
        },
        "files": [
          {
            "file": "/Users/q284340/Agentic/nano-degree/docs-content/03_mcp-acp-a2a/Session9_Production_Agent_Deployment.md",
            "total_code_blocks": 54,
            "large_blocks_count": 0,
            "code_blocks": [
              {
                "start_line": 66,
                "end_line": 82,
                "language": "yaml",
                "content": [
                  "# k8s/namespace-production.yaml - Enterprise namespace with governance",
                  "",
                  "apiVersion: v1",
                  "kind: Namespace",
                  "metadata:",
                  "  name: agentic-ai-prod",
                  "  labels:",
                  "    name: agentic-ai-prod",
                  "    environment: production",
                  "    compliance: \"gdpr-hipaa\"",
                  "    cost-center: \"ai-operations\"",
                  "    owner: \"ai-platform-team\"",
                  "  annotations:",
                  "    scheduler.alpha.kubernetes.io/node-selector: \"workload=ai-agents\"",
                  "    kubernetes.io/managed-by: \"enterprise-platform\""
                ],
                "line_count": 15
              },
              {
                "start_line": 86,
                "end_line": 106,
                "language": "yaml",
                "content": [
                  "---",
                  "",
                  "# Resource Quota for enterprise resource management",
                  "",
                  "apiVersion: v1",
                  "kind: ResourceQuota",
                  "metadata:",
                  "  name: agentic-ai-quota",
                  "  namespace: agentic-ai-prod",
                  "spec:",
                  "  hard:",
                  "    requests.cpu: \"100\"      # 100 CPU cores",
                  "    requests.memory: \"400Gi\"  # 400GB RAM",
                  "    requests.nvidia.com/gpu: \"20\"  # 20 GPUs",
                  "    limits.cpu: \"200\"",
                  "    limits.memory: \"800Gi\"",
                  "    limits.nvidia.com/gpu: \"20\"",
                  "    persistentvolumeclaims: \"50\"",
                  "    services.loadbalancers: \"5\""
                ],
                "line_count": 19
              },
              {
                "start_line": 121,
                "end_line": 132,
                "language": "yaml",
                "content": [
                  "# k8s/enterprise-configmap.yaml - Production configuration",
                  "",
                  "apiVersion: v1",
                  "kind: ConfigMap",
                  "metadata:",
                  "  name: agentic-ai-config",
                  "  namespace: agentic-ai-prod",
                  "  labels:",
                  "    config-version: \"v2.1.0\"",
                  "    environment: production"
                ],
                "line_count": 10
              },
              {
                "start_line": 136,
                "end_line": 143,
                "language": "yaml",
                "content": [
                  "data:",
                  "  # Redis Configuration",
                  "  redis.host: \"redis-ha-service.agentic-ai-prod.svc.cluster.local\"",
                  "  redis.port: \"6379\"",
                  "  redis.ssl.enabled: \"true\"",
                  "  redis.cluster.enabled: \"true\""
                ],
                "line_count": 6
              },
              {
                "start_line": 147,
                "end_line": 153,
                "language": "yaml",
                "content": [
                  "  # Monitoring and Observability",
                  "  prometheus.enabled: \"true\"",
                  "  prometheus.port: \"9090\"",
                  "  jaeger.enabled: \"true\"",
                  "  jaeger.endpoint: \"http://jaeger-collector.monitoring:14268/api/traces\""
                ],
                "line_count": 5
              },
              {
                "start_line": 157,
                "end_line": 163,
                "language": "yaml",
                "content": [
                  "  # Agent Performance Configuration",
                  "  agent.max_concurrent_workflows: \"100\"",
                  "  agent.heartbeat_interval: \"15\"",
                  "  agent.health_check_timeout: \"5\"",
                  "  agent.graceful_shutdown_timeout: \"60\""
                ],
                "line_count": 5
              },
              {
                "start_line": 167,
                "end_line": 173,
                "language": "yaml",
                "content": [
                  "  # MCP and Protocol Configuration",
                  "  mcp.server.timeout: \"120\"",
                  "  mcp.connection_pool_size: \"50\"",
                  "  a2a.discovery.enabled: \"true\"",
                  "  acp.local_registry.enabled: \"true\""
                ],
                "line_count": 5
              },
              {
                "start_line": 177,
                "end_line": 183,
                "language": "yaml",
                "content": [
                  "  # Performance and Optimization",
                  "  optimization.enabled: \"true\"",
                  "  optimization.gpu_memory_fraction: \"0.8\"",
                  "  optimization.batch_size: \"32\"",
                  "  optimization.model_parallelism: \"true\""
                ],
                "line_count": 5
              },
              {
                "start_line": 187,
                "end_line": 200,
                "language": "yaml",
                "content": [
                  "  # Compliance and Security",
                  "  audit.enabled: \"true\"",
                  "  audit.log_level: \"INFO\"",
                  "  encryption.at_rest: \"true\"",
                  "  encryption.in_transit: \"true\"",
                  "  ",
                  "  # Scaling Configuration",
                  "  scaling.min_replicas: \"3\"",
                  "  scaling.max_replicas: \"50\"",
                  "  scaling.target_cpu_utilization: \"70\"",
                  "  scaling.target_memory_utilization: \"80\"",
                  "  scaling.gpu_utilization_threshold: \"75\""
                ],
                "line_count": 12
              },
              {
                "start_line": 208,
                "end_line": 222,
                "language": "yaml",
                "content": [
                  "# k8s/enterprise-secrets.yaml - Encrypted secrets management",
                  "",
                  "apiVersion: v1",
                  "kind: Secret",
                  "metadata:",
                  "  name: agentic-ai-secrets",
                  "  namespace: agentic-ai-prod",
                  "  labels:",
                  "    security-tier: \"high\"",
                  "    rotation-schedule: \"monthly\"",
                  "  annotations:",
                  "    kubernetes.io/service-account.name: \"agentic-ai-service\"",
                  "type: Opaque"
                ],
                "line_count": 13
              },
              {
                "start_line": 226,
                "end_line": 237,
                "language": "yaml",
                "content": [
                  "data:",
                  "  # API Keys (base64 encoded)",
                  "  openai-api-key: <base64-encoded-key>",
                  "  anthropic-api-key: <base64-encoded-key>",
                  "  azure-openai-key: <base64-encoded-key>",
                  "  ",
                  "  # Database Credentials",
                  "  postgres-username: <base64-encoded-username>",
                  "  postgres-password: <base64-encoded-password>",
                  "  redis-password: <base64-encoded-password>"
                ],
                "line_count": 10
              },
              {
                "start_line": 241,
                "end_line": 250,
                "language": "yaml",
                "content": [
                  "  # TLS Certificates",
                  "  tls.crt: <base64-encoded-certificate>",
                  "  tls.key: <base64-encoded-private-key>",
                  "  ca.crt: <base64-encoded-ca-certificate>",
                  "  ",
                  "  # JWT Signing Keys",
                  "  jwt-private-key: <base64-encoded-jwt-key>",
                  "  jwt-public-key: <base64-encoded-public-key>"
                ],
                "line_count": 8
              },
              {
                "start_line": 254,
                "end_line": 260,
                "language": "yaml",
                "content": [
                  "  # External Service Credentials",
                  "  aws-access-key-id: <base64-encoded-access-key>",
                  "  aws-secret-access-key: <base64-encoded-secret>",
                  "  gcp-service-account: <base64-encoded-json-key>",
                  "---"
                ],
                "line_count": 5
              },
              {
                "start_line": 264,
                "end_line": 277,
                "language": "yaml",
                "content": [
                  "# Sealed Secrets for GitOps (production security)",
                  "",
                  "apiVersion: bitnami.com/v1alpha1",
                  "kind: SealedSecret",
                  "metadata:",
                  "  name: agentic-ai-sealed-secrets",
                  "  namespace: agentic-ai-prod",
                  "spec:",
                  "  encryptedData:",
                  "    production-db-url: <sealed-encrypted-data>",
                  "    monitoring-api-key: <sealed-encrypted-data>",
                  "    compliance-webhook-secret: <sealed-encrypted-data>"
                ],
                "line_count": 12
              },
              {
                "start_line": 292,
                "end_line": 304,
                "language": "yaml",
                "content": [
                  "# k8s/redis-deployment.yaml - Deployment foundation",
                  "",
                  "apiVersion: apps/v1",
                  "kind: Deployment",
                  "metadata:",
                  "  name: redis",
                  "  namespace: agent-system",
                  "  labels:",
                  "    app: redis",
                  "    component: message-queue",
                  "    tier: data"
                ],
                "line_count": 11
              },
              {
                "start_line": 308,
                "end_line": 319,
                "language": "yaml",
                "content": [
                  "spec:",
                  "  replicas: 1                    # Single instance for simplicity",
                  "  selector:",
                  "    matchLabels:",
                  "      app: redis",
                  "  template:",
                  "    metadata:",
                  "      labels:",
                  "        app: redis",
                  "        component: message-queue"
                ],
                "line_count": 10
              },
              {
                "start_line": 323,
                "end_line": 336,
                "language": "yaml",
                "content": [
                  "    spec:",
                  "      containers:",
                  "      - name: redis",
                  "        image: redis:7-alpine     # Latest stable Redis",
                  "        ports:",
                  "        - containerPort: 6379",
                  "        env:",
                  "        - name: REDIS_PASSWORD    # Secure password from secrets",
                  "          valueFrom:",
                  "            secretKeyRef:",
                  "              name: agent-secrets",
                  "              key: redis-password"
                ],
                "line_count": 12
              },
              {
                "start_line": 340,
                "end_line": 352,
                "language": "yaml",
                "content": [
                  "        command:",
                  "        - redis-server",
                  "        - --requirepass",
                  "        - $(REDIS_PASSWORD)        # Secure Redis with password",
                  "        resources:",
                  "          requests:                # Minimum guaranteed resources",
                  "            memory: \"256Mi\"",
                  "            cpu: \"250m\"",
                  "          limits:                  # Maximum allowed resources",
                  "            memory: \"512Mi\"",
                  "            cpu: \"500m\""
                ],
                "line_count": 11
              },
              {
                "start_line": 356,
                "end_line": 370,
                "language": "yaml",
                "content": [
                  "        volumeMounts:",
                  "        - name: redis-data",
                  "          mountPath: /data         # Redis data directory for persistence",
                  "        livenessProbe:",
                  "          exec:",
                  "            command:",
                  "            - redis-cli",
                  "            - --no-auth-warning",
                  "            - -a",
                  "            - $(REDIS_PASSWORD)",
                  "            - ping",
                  "          initialDelaySeconds: 30     # Wait for Redis startup",
                  "          periodSeconds: 10           # Check every 10 seconds"
                ],
                "line_count": 13
              },
              {
                "start_line": 374,
                "end_line": 389,
                "language": "yaml",
                "content": [
                  "        readinessProbe:",
                  "          exec:",
                  "            command:",
                  "            - redis-cli",
                  "            - --no-auth-warning  ",
                  "            - -a",
                  "            - $(REDIS_PASSWORD)",
                  "            - ping",
                  "          initialDelaySeconds: 5      # Quick readiness check",
                  "          periodSeconds: 5            # Frequent ready checks",
                  "      volumes:",
                  "      - name: redis-data",
                  "        persistentVolumeClaim:",
                  "          claimName: redis-pvc      # Link to persistent volume"
                ],
                "line_count": 14
              },
              {
                "start_line": 397,
                "end_line": 408,
                "language": "yaml",
                "content": [
                  "# k8s/agent-deployment.yaml",
                  "",
                  "apiVersion: apps/v1",
                  "kind: Deployment",
                  "metadata:",
                  "  name: mcp-agent",
                  "  namespace: agent-system",
                  "  labels:",
                  "    app: mcp-agent",
                  "    version: v1.0.0"
                ],
                "line_count": 10
              },
              {
                "start_line": 412,
                "end_line": 427,
                "language": "yaml",
                "content": [
                  "spec:",
                  "  replicas: 3",
                  "  selector:",
                  "    matchLabels:",
                  "      app: mcp-agent",
                  "  template:",
                  "    metadata:",
                  "      labels:",
                  "        app: mcp-agent",
                  "        version: v1.0.0",
                  "      annotations:",
                  "        prometheus.io/scrape: \"true\"",
                  "        prometheus.io/port: \"8080\"",
                  "        prometheus.io/path: \"/metrics\""
                ],
                "line_count": 14
              },
              {
                "start_line": 431,
                "end_line": 444,
                "language": "yaml",
                "content": [
                  "    spec:",
                  "      serviceAccountName: agent-service-account",
                  "      containers:",
                  "      - name: mcp-agent",
                  "        image: agent-registry/mcp-agent:v1.0.0",
                  "        ports:",
                  "        - containerPort: 8080",
                  "          name: http              # REST API for agent communication",
                  "        - containerPort: 8081",
                  "          name: grpc              # gRPC for high-performance calls  ",
                  "        - containerPort: 9090",
                  "          name: metrics           # Prometheus metrics endpoint"
                ],
                "line_count": 12
              },
              {
                "start_line": 448,
                "end_line": 465,
                "language": "yaml",
                "content": [
                  "        env:",
                  "        - name: REDIS_HOST",
                  "          valueFrom:",
                  "            configMapKeyRef:",
                  "              name: agent-config",
                  "              key: redis.host     # Dynamic Redis host configuration",
                  "        - name: REDIS_PASSWORD",
                  "          valueFrom:",
                  "            secretKeyRef:",
                  "              name: agent-secrets # Secure password management",
                  "              key: redis-password",
                  "        - name: API_KEY",
                  "          valueFrom:",
                  "            secretKeyRef:",
                  "              name: agent-secrets",
                  "              key: api-key        # External API authentication"
                ],
                "line_count": 16
              },
              {
                "start_line": 469,
                "end_line": 477,
                "language": "yaml",
                "content": [
                  "        resources:",
                  "          requests:",
                  "            memory: \"512Mi\"",
                  "            cpu: \"500m\"",
                  "          limits:",
                  "            memory: \"1Gi\"",
                  "            cpu: \"1000m\""
                ],
                "line_count": 7
              },
              {
                "start_line": 481,
                "end_line": 490,
                "language": "yaml",
                "content": [
                  "        startupProbe:",
                  "          httpGet:",
                  "            path: /health",
                  "            port: 8080",
                  "          initialDelaySeconds: 30    # Wait for agent initialization",
                  "          periodSeconds: 10          # Check every 10 seconds",
                  "          timeoutSeconds: 5          # 5-second timeout",
                  "          failureThreshold: 10       # Allow up to 100 seconds startup"
                ],
                "line_count": 8
              },
              {
                "start_line": 494,
                "end_line": 511,
                "language": "yaml",
                "content": [
                  "        livenessProbe:",
                  "          httpGet:",
                  "            path: /health",
                  "            port: 8080",
                  "          initialDelaySeconds: 60    # Start after startup completes",
                  "          periodSeconds: 30          # Check every 30 seconds",
                  "          timeoutSeconds: 10         # Longer timeout for busy agents",
                  "          failureThreshold: 3        # Restart after 3 failures",
                  "        readinessProbe:",
                  "          httpGet:",
                  "            path: /ready             # Different endpoint for readiness",
                  "            port: 8080",
                  "          initialDelaySeconds: 30",
                  "          periodSeconds: 10          # Frequent readiness checks",
                  "          timeoutSeconds: 5",
                  "          failureThreshold: 3        # Quick traffic removal"
                ],
                "line_count": 16
              },
              {
                "start_line": 519,
                "end_line": 533,
                "language": "yaml",
                "content": [
                  "---",
                  "apiVersion: autoscaling/v2",
                  "kind: HorizontalPodAutoscaler",
                  "metadata:",
                  "  name: mcp-agent-hpa",
                  "  namespace: agent-system",
                  "spec:",
                  "  scaleTargetRef:",
                  "    apiVersion: apps/v1",
                  "    kind: Deployment",
                  "    name: mcp-agent",
                  "  minReplicas: 3",
                  "  maxReplicas: 20"
                ],
                "line_count": 13
              },
              {
                "start_line": 537,
                "end_line": 558,
                "language": "yaml",
                "content": [
                  "  metrics:",
                  "  - type: Resource",
                  "    resource:",
                  "      name: cpu",
                  "      target:",
                  "        type: Utilization",
                  "        averageUtilization: 70",
                  "  - type: Resource",
                  "    resource:",
                  "      name: memory",
                  "      target:",
                  "        type: Utilization",
                  "        averageUtilization: 80",
                  "  - type: Pods",
                  "    pods:",
                  "      metric:",
                  "        name: active_workflows",
                  "      target:",
                  "        type: AverageValue",
                  "        averageValue: \"10\""
                ],
                "line_count": 20
              },
              {
                "start_line": 562,
                "end_line": 580,
                "language": "yaml",
                "content": [
                  "  behavior:",
                  "    scaleDown:",
                  "      stabilizationWindowSeconds: 300",
                  "      policies:",
                  "      - type: Percent",
                  "        value: 10",
                  "        periodSeconds: 60",
                  "    scaleUp:",
                  "      stabilizationWindowSeconds: 60",
                  "      policies:",
                  "      - type: Percent",
                  "        value: 50",
                  "        periodSeconds: 60",
                  "      - type: Pods",
                  "        value: 2",
                  "        periodSeconds: 60",
                  "      selectPolicy: Max"
                ],
                "line_count": 17
              },
              {
                "start_line": 595,
                "end_line": 610,
                "language": "yaml",
                "content": [
                  "# k8s/istio-config.yaml",
                  "",
                  "apiVersion: networking.istio.io/v1beta1",
                  "kind: VirtualService",
                  "metadata:",
                  "  name: mcp-agent-vs",
                  "  namespace: agent-system",
                  "spec:",
                  "  hosts:",
                  "  - mcp-agent-service",
                  "  http:",
                  "  - match:",
                  "    - uri:",
                  "        prefix: /api/v1"
                ],
                "line_count": 14
              },
              {
                "start_line": 614,
                "end_line": 626,
                "language": "yaml",
                "content": [
                  "    route:",
                  "    - destination:",
                  "        host: mcp-agent-service",
                  "        port:",
                  "          number: 80",
                  "      weight: 100",
                  "    fault:",
                  "      delay:",
                  "        percentage:",
                  "          value: 0.1",
                  "        fixedDelay: 5s"
                ],
                "line_count": 11
              },
              {
                "start_line": 632,
                "end_line": 652,
                "language": "yaml",
                "content": [
                  "---",
                  "apiVersion: networking.istio.io/v1beta1",
                  "kind: DestinationRule",
                  "metadata:",
                  "  name: mcp-agent-dr",
                  "  namespace: agent-system",
                  "spec:",
                  "  host: mcp-agent-service",
                  "  trafficPolicy:",
                  "    loadBalancer:",
                  "      simple: LEAST_CONN",
                  "    connectionPool:",
                  "      tcp:",
                  "        maxConnections: 100",
                  "      http:",
                  "        http1MaxPendingRequests: 50",
                  "        http2MaxRequests: 100",
                  "        maxRequestsPerConnection: 10",
                  "        maxRetries: 3"
                ],
                "line_count": 19
              },
              {
                "start_line": 656,
                "end_line": 662,
                "language": "yaml",
                "content": [
                  "    circuitBreaker:",
                  "      consecutiveErrors: 5",
                  "      interval: 30s",
                  "      baseEjectionTime: 30s",
                  "      maxEjectionPercent: 50"
                ],
                "line_count": 5
              },
              {
                "start_line": 681,
                "end_line": 692,
                "language": "python",
                "content": [
                  "# monitoring/agent_metrics.py - Production monitoring foundation",
                  "",
                  "import time                                                    # For timing measurements",
                  "import asyncio                                                # Async monitoring operations",
                  "from typing import Dict, Any, Optional                        # Type hints for clarity",
                  "from prometheus_client import Counter, Histogram, Gauge, Info, start_http_server  # Prometheus metrics",
                  "import logging                                                # Structured logging",
                  "from datetime import datetime, timedelta                      # Time-based calculations",
                  "",
                  "logger = logging.getLogger(__name__)                          # Component-specific logging"
                ],
                "line_count": 10
              },
              {
                "start_line": 696,
                "end_line": 710,
                "language": "python",
                "content": [
                  "class AgentMetrics:",
                  "    \"\"\"Comprehensive metrics collection for production agent systems.\"\"\"",
                  "    ",
                  "    def __init__(self, service_name: str = \"mcp-agent\", metrics_port: int = 9090):",
                  "        self.service_name = service_name              # Service identifier for metric labeling",
                  "        self.metrics_port = metrics_port              # Prometheus scraping endpoint port",
                  "        ",
                  "        # Initialize Prometheus metrics registry",
                  "        self._initialize_metrics()",
                  "        ",
                  "        # Start HTTP server for Prometheus metrics scraping",
                  "        start_http_server(metrics_port)",
                  "        logger.info(f\"Metrics server started on port {metrics_port}\")"
                ],
                "line_count": 13
              },
              {
                "start_line": 714,
                "end_line": 725,
                "language": "python",
                "content": [
                  "    def _initialize_metrics(self):",
                  "        \"\"\"Initialize comprehensive Prometheus metrics for production monitoring.\"\"\"",
                  "        ",
                  "        # System identification and metadata",
                  "        self.info = Info('agent_info', 'Agent system information and metadata')",
                  "        self.info.info({",
                  "            'service': self.service_name,      # Service identifier for routing alerts",
                  "            'version': '1.0.0',               # Version for change correlation  ",
                  "            'environment': 'production'       # Environment for alert scoping",
                  "        })"
                ],
                "line_count": 10
              },
              {
                "start_line": 729,
                "end_line": 744,
                "language": "python",
                "content": [
                  "        # HTTP request tracking for API performance",
                  "        self.request_count = Counter(",
                  "            'http_requests_total',            # Standard metric name for dashboards",
                  "            'Total HTTP requests received',",
                  "            ['method', 'endpoint', 'status_code']  # Labels for detailed analysis",
                  "        )",
                  "        ",
                  "        # Request latency distribution for SLA monitoring",
                  "        self.request_duration = Histogram(",
                  "            'http_request_duration_seconds',   # Duration in seconds (Prometheus standard)",
                  "            'HTTP request duration distribution',",
                  "            ['method', 'endpoint'],",
                  "            buckets=[0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10.0]  # SLA-aligned buckets",
                  "        )"
                ],
                "line_count": 14
              },
              {
                "start_line": 748,
                "end_line": 761,
                "language": "python",
                "content": [
                  "        # Real-time workflow monitoring for capacity planning",
                  "        self.active_workflows = Gauge(",
                  "            'active_workflows',                         # Current workflow load",
                  "            'Number of currently active workflows'     # For auto-scaling decisions",
                  "        )",
                  "        ",
                  "        # Workflow success tracking for reliability metrics",
                  "        self.workflow_executions = Counter(",
                  "            'workflow_executions_total',               # Total executions over time",
                  "            'Total workflow executions by type and outcome',",
                  "            ['workflow_type', 'status']                # Success/failure breakdown",
                  "        )"
                ],
                "line_count": 12
              },
              {
                "start_line": 765,
                "end_line": 779,
                "language": "python",
                "content": [
                  "        # MCP tool interactions",
                  "        self.mcp_tool_calls = Counter(",
                  "            'mcp_tool_calls_total',",
                  "            'Total MCP tool calls',",
                  "            ['server', 'tool', 'status']",
                  "        )",
                  "        ",
                  "        self.mcp_tool_duration = Histogram(",
                  "            'mcp_tool_duration_seconds',",
                  "            'MCP tool call duration in seconds',",
                  "            ['server', 'tool'],",
                  "            buckets=[0.1, 0.5, 1.0, 2.0, 5.0, 10.0]",
                  "        )"
                ],
                "line_count": 13
              },
              {
                "start_line": 783,
                "end_line": 802,
                "language": "python",
                "content": [
                  "        # A2A communication metrics",
                  "        self.a2a_messages_sent = Counter(",
                  "            'a2a_messages_sent_total',",
                  "            'Total A2A messages sent',",
                  "            ['message_type', 'recipient']",
                  "        )",
                  "        ",
                  "        # Resource and error tracking",
                  "        self.memory_usage = Gauge(",
                  "            'memory_usage_bytes',",
                  "            'Current memory usage in bytes'",
                  "        )",
                  "        ",
                  "        self.error_count = Counter(",
                  "            'errors_total',",
                  "            'Total errors',",
                  "            ['error_type', 'component']",
                  "        )"
                ],
                "line_count": 18
              },
              {
                "start_line": 810,
                "end_line": 823,
                "language": "python",
                "content": [
                  "    def record_request(self, method: str, endpoint: str, status_code: int, duration: float):",
                  "        \"\"\"Record HTTP request metrics.\"\"\"",
                  "        self.request_count.labels(",
                  "            method=method,",
                  "            endpoint=endpoint,",
                  "            status_code=str(status_code)",
                  "        ).inc()",
                  "        ",
                  "        self.request_duration.labels(",
                  "            method=method,",
                  "            endpoint=endpoint",
                  "        ).observe(duration)"
                ],
                "line_count": 12
              },
              {
                "start_line": 827,
                "end_line": 839,
                "language": "python",
                "content": [
                  "    def record_workflow_execution(self, workflow_type: str, status: str, duration: float):",
                  "        \"\"\"Record workflow execution metrics.\"\"\"",
                  "        self.workflow_executions.labels(",
                  "            workflow_type=workflow_type,",
                  "            status=status",
                  "        ).inc()",
                  "        ",
                  "        if status == \"completed\" or status == \"failed\":",
                  "            self.workflow_duration.labels(",
                  "                workflow_type=workflow_type",
                  "            ).observe(duration)"
                ],
                "line_count": 11
              },
              {
                "start_line": 843,
                "end_line": 857,
                "language": "python",
                "content": [
                  "    def record_mcp_tool_call(self, server: str, tool: str, status: str, duration: float):",
                  "        \"\"\"Record MCP tool call metrics.\"\"\"",
                  "        self.mcp_tool_calls.labels(",
                  "            server=server,",
                  "            tool=tool,",
                  "            status=status",
                  "        ).inc()",
                  "        ",
                  "        if status == \"success\":",
                  "            self.mcp_tool_duration.labels(",
                  "                server=server,",
                  "                tool=tool",
                  "            ).observe(duration)"
                ],
                "line_count": 13
              },
              {
                "start_line": 865,
                "end_line": 875,
                "language": "python",
                "content": [
                  "# monitoring/health_checker.py",
                  "",
                  "import asyncio",
                  "import time",
                  "from typing import Dict, Any, List, Callable",
                  "from datetime import datetime, timedelta",
                  "import logging",
                  "",
                  "logger = logging.getLogger(__name__)"
                ],
                "line_count": 9
              },
              {
                "start_line": 879,
                "end_line": 890,
                "language": "python",
                "content": [
                  "class HealthChecker:",
                  "    \"\"\"Comprehensive health checking system for agent services.\"\"\"",
                  "    ",
                  "    def __init__(self):",
                  "        self.liveness_checks: Dict[str, Callable] = {}",
                  "        self.readiness_checks: Dict[str, Callable] = {}",
                  "        self.startup_checks: Dict[str, Callable] = {}",
                  "        ",
                  "        self.check_results: Dict[str, Dict[str, Any]] = {}",
                  "        self.last_check_time = {}"
                ],
                "line_count": 10
              },
              {
                "start_line": 894,
                "end_line": 899,
                "language": "python",
                "content": [
                  "    def register_liveness_check(self, name: str, check_func: Callable):",
                  "        \"\"\"Register a liveness check function.\"\"\"",
                  "        self.liveness_checks[name] = check_func",
                  "        logger.info(f\"Registered liveness check: {name}\")"
                ],
                "line_count": 4
              },
              {
                "start_line": 903,
                "end_line": 914,
                "language": "python",
                "content": [
                  "    async def check_health(self) -> Dict[str, Any]:",
                  "        \"\"\"Execute all health checks and return results.\"\"\"",
                  "        ",
                  "        start_time = time.time()",
                  "        health_status = {",
                  "            \"status\": \"healthy\",",
                  "            \"timestamp\": datetime.now().isoformat(),",
                  "            \"checks\": {},",
                  "            \"duration_ms\": 0",
                  "        }"
                ],
                "line_count": 10
              },
              {
                "start_line": 918,
                "end_line": 930,
                "language": "python",
                "content": [
                  "        # Run liveness checks",
                  "        for check_name, check_func in self.liveness_checks.items():",
                  "            try:",
                  "                result = await self._execute_check(check_func)",
                  "                health_status[\"checks\"][check_name] = {",
                  "                    \"status\": \"pass\" if result else \"fail\",",
                  "                    \"checked_at\": datetime.now().isoformat()",
                  "                }",
                  "                ",
                  "                if not result:",
                  "                    health_status[\"status\"] = \"unhealthy\""
                ],
                "line_count": 11
              },
              {
                "start_line": 934,
                "end_line": 945,
                "language": "python",
                "content": [
                  "            except Exception as e:",
                  "                health_status[\"checks\"][check_name] = {",
                  "                    \"status\": \"fail\",",
                  "                    \"error\": str(e),",
                  "                    \"checked_at\": datetime.now().isoformat()",
                  "                }",
                  "                health_status[\"status\"] = \"unhealthy\"",
                  "        ",
                  "        health_status[\"duration_ms\"] = int((time.time() - start_time) * 1000)",
                  "        return health_status"
                ],
                "line_count": 10
              },
              {
                "start_line": 953,
                "end_line": 968,
                "language": "yaml",
                "content": [
                  "# monitoring/alerts/system.yml",
                  "",
                  "groups:",
                  "- name: system",
                  "  rules:",
                  "  - alert: HighCPUUsage",
                  "    expr: cpu_usage_percent > 80",
                  "    for: 5m",
                  "    labels:",
                  "      severity: warning",
                  "      component: system",
                  "    annotations:",
                  "      summary: \"High CPU usage detected\"",
                  "      description: \"CPU usage is {{ $value }}% for more than 5 minutes\""
                ],
                "line_count": 14
              },
              {
                "start_line": 972,
                "end_line": 982,
                "language": "yaml",
                "content": [
                  "  - alert: HighMemoryUsage",
                  "    expr: (memory_usage_bytes / (1024*1024*1024)) > 0.8",
                  "    for: 5m",
                  "    labels:",
                  "      severity: warning",
                  "      component: system",
                  "    annotations:",
                  "      summary: \"High memory usage detected\"",
                  "      description: \"Memory usage is {{ $value }}GB\""
                ],
                "line_count": 9
              },
              {
                "start_line": 986,
                "end_line": 996,
                "language": "yaml",
                "content": [
                  "  - alert: WorkflowFailureRate",
                  "    expr: (rate(workflow_executions_total{status=\"failed\"}[5m]) / rate(workflow_executions_total[5m])) > 0.1",
                  "    for: 3m",
                  "    labels:",
                  "      severity: critical",
                  "      component: workflow",
                  "    annotations:",
                  "      summary: \"High workflow failure rate\"",
                  "      description: \"Workflow failure rate is {{ $value | humanizePercentage }}\""
                ],
                "line_count": 9
              },
              {
                "start_line": 1000,
                "end_line": 1010,
                "language": "yaml",
                "content": [
                  "  - alert: MCPToolCallLatency",
                  "    expr: histogram_quantile(0.95, rate(mcp_tool_duration_seconds_bucket[5m])) > 10",
                  "    for: 2m",
                  "    labels:",
                  "      severity: warning",
                  "      component: mcp",
                  "    annotations:",
                  "      summary: \"High MCP tool call latency\"",
                  "      description: \"95th percentile latency is {{ $value }}s\""
                ],
                "line_count": 9
              }
            ],
            "large_blocks": [],
            "needs_refactoring": false
          }
        ]
      },
      "script": "/Users/q284340/Agentic/nano-degree/scripts/detect-large-code-blocks.py"
    },
    "check_markdown_formatting": {
      "success": true,
      "data": {
        "summary": {
          "total_files": 1,
          "files_with_issues": 0,
          "total_issues": 0
        },
        "files": [
          {
            "file": "/Users/q284340/Agentic/nano-degree/docs-content/03_mcp-acp-a2a/Session9_Production_Agent_Deployment.md",
            "total_issues": 0,
            "issues": [],
            "needs_fixing": false
          }
        ]
      },
      "script": "/Users/q284340/Agentic/nano-degree/scripts/check-markdown-formatting.py"
    },
    "detect_insufficient_explanations": {
      "success": true,
      "data": {
        "summary": {
          "total_files": 1,
          "files_needing_improvement": 1,
          "total_issues": 2,
          "average_quality_score": 96.29629629629629
        },
        "files": [
          {
            "total_code_blocks": 54,
            "total_issues": 2,
            "issues": [
              {
                "type": "lacks_educational_context",
                "severity": "medium",
                "line": 390,
                "code_block_size": 14,
                "message": "Code block at line 374 explanation lacks educational context",
                "suggestion": "Add context explaining WHY this approach is used and HOW it benefits the student"
              },
              {
                "type": "generic_explanation",
                "severity": "medium",
                "line": 611,
                "code_block_size": 13,
                "message": "Code block at line 595 has generic/lazy explanation",
                "suggestion": "Replace generic phrases with specific, educational explanations"
              }
            ],
            "needs_improvement": true,
            "quality_score": 96.29629629629629,
            "file": "/Users/q284340/Agentic/nano-degree/docs-content/03_mcp-acp-a2a/Session9_Production_Agent_Deployment.md"
          }
        ]
      },
      "script": "/Users/q284340/Agentic/nano-degree/scripts/detect-insufficient-explanations.py"
    }
  },
  "priority_files": [
    {
      "file": "/Users/q284340/Agentic/nano-degree/docs-content/03_mcp-acp-a2a/Session9_Production_Agent_Deployment.md",
      "file_name": "Session9_Production_Agent_Deployment.md",
      "priority_score": 0.7407407407407419,
      "issues": [
        "96.3% explanation quality"
      ]
    }
  ]
}