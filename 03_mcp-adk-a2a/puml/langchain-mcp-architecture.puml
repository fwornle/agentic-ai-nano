@startuml langchain-mcp-architecture
!include ../../config/_standard-style.puml

title LangChain MCP Integration Architecture

package "LangChain Application" {
  [LLM (GPT-4/Claude)] <<agent>> as llm
  [ReAct Agent] <<core>> as agent
  [LangChain MCP Adapter] <<api>> as adapter
  [Tool Registry] <<util>> as registry
}

package "MCP Servers" {
  [Weather MCP Server] <<external>> as weather
  [File System MCP Server] <<external>> as filesystem  
  [Database MCP Server] <<storage>> as database
}

package "External Resources" {
  [Weather APIs] <<external>> as weather_api
  [Local File System] <<storage>> as files
  [SQLite Database] <<storage>> as sqlite
}

package "LangGraph Workflow" {
  [Planning Node] <<core>> as plan
  [Tool Execution Node] <<api>> as execute
  [Reflection Node] <<util>> as reflect
  [Decision Node] <<core>> as decide
}

llm SYNC_LINE agent : Natural Language
agent SYNC_LINE adapter : Tool Requests
adapter SYNC_LINE registry : Discover Tools

registry SYNC_LINE weather : JSON-RPC
registry SYNC_LINE filesystem : JSON-RPC
registry SYNC_LINE database : JSON-RPC

weather DATA_LINE weather_api : API Calls
filesystem DATA_LINE files : File Operations
database DATA_LINE sqlite : SQL Queries

agent CONTROL_LINE plan : Start Workflow
plan SYNC_LINE execute : Execute Tools
execute ASYNC_LINE reflect : Evaluate Results
reflect CONTROL_LINE decide : Continue/Stop
decide OPTIONAL_LINE plan : Iterate

note right of adapter
  LangChain MCP Adapter:
  - Automatic tool discovery
  - Type conversion
  - Error handling
  - Session management
end note

note bottom of registry
  Multi-Server Support:
  - Weather: get_weather, forecast
  - FileSystem: read_file, write_file
  - Database: query, insert, update
end note

@enduml